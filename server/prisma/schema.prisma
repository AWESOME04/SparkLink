generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define subscription tier enum
enum SubscriptionTier {
  STARTER
  RISE
  BLAZE
}

// Define page type enum
enum PageType {
  HOME
  ABOUT
  SERVICES
  PRODUCTS
  PROJECTS
  CONTACT
  GALLERY
  SKILLS
  EDUCATION
  EXPERIENCE
  CERTIFICATIONS
  BOOKING
  PAYMENTS
  EVENTS
  CUSTOM
}

// Define event type enum
enum AnalyticsEvent {
  PROFILE_VIEW
  PAGE_VIEW
  LINK_CLICK
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  password            String?
  googleId            String?   @unique
  firstName           String?
  lastName            String?
  username            String?   @unique
  country             String?
  phone               String?
  profilePicture      String?
  isVerified          Boolean   @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  subscription        SubscriptionTier @default(STARTER)
  subscriptionData    Json?
  subscriptionExpiresAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  profile             Profile?
  analytics           Analytics[]
  
  @@map("users")
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  backgroundImage String?
  bio             String?  @db.Text
  tagline         String?
  countryFlag     String?
  isPublished     Boolean  @default(false)
  customDomain    String?  @unique
  showPoweredBy   Boolean  @default(true)
  templateId      String?
  colorScheme     Json?    // Store color preferences
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template        Template? @relation(fields: [templateId], references: [id])
  pages           Page[]
  socialLinks     SocialLink[]
  
  @@map("profiles")
}

model Template {
  id              String   @id @default(cuid())
  name            String
  description     String
  previewImage    String
  category        String   // "professional", "creative", "minimal", etc.
  tier            SubscriptionTier  // Which subscription tier has access
  features        Json     // Store template-specific features
  isDefault       Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  profiles        Profile[]
  
  @@map("templates")
}

model Page {
  id                  String    @id @default(cuid())
  profileId           String
  type                PageType
  title               String
  slug                String
  content             Json      // Flexible JSON content based on page type
  order               Int       @default(0)
  isPublished         Boolean   @default(false)
  isPasswordProtected Boolean   @default(false)
  password            String?   // Stored as a hash
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  profile             Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@map("pages")
  @@index([profileId, slug])
}

model SocialLink {
  id        String   @id @default(cuid())
  profileId String
  platform  String
  url       String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())  // Added default value for existing rows
  
  // Relations
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@map("social_links")
  @@index([profileId])
}

model Analytics {
  id          String         @id @default(cuid())
  userId      String
  event       AnalyticsEvent
  data        Json
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime       @default(now())
  
  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("analytics")
  @@index([userId, event])
  @@index([createdAt])
}
